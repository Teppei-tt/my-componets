---
import CodePost from '../../../../layouts/CodePost.astro';

const post = Astro.props;
---

<CodePost {...post.data}>
	<header class="Header">
		<h1 class="Header-logo">Logo</h1>
		<button type="button" class="Header-button js-openDrawer" aria-controls="drawer" aria-expanded="false">
			<img src="../assets/open.svg" class="Header-button-image" alt="ナビゲーションを開く" width="24" height="18" />
		</button>
	</header>
	<div id="drawer" class="Drawer js-drawer" aria-expanded="false">
		<div class="Drawer-backdrop js-backdrop"></div>
		<nav class="Drawer-nav Nav">
			<button type="button" class="Nav-button js-closeDrawer" aria-controls="drawer" aria-expanded="false">
				<img src="../assets/close.svg" class="Nav-button-image" alt="ナビゲーションを閉じる" width="18" height="18" />
			</button>
			<ul class="Nav-list">
				<li class="Nav-item">
					<a href="#" class="Nav-link">アイテム 1</a>
				</li>
				<li class="Nav-item">
					<a href="#" class="Nav-link">アイテム 2</a>
				</li>
				<li class="Nav-item">
					<a href="#" class="Nav-link">アイテム 3</a>
				</li>
				<li class="Nav-item">
					<a href="#" class="Nav-link">アイテム 4</a>
				</li>
				<li class="Nav-item">
					<a href="#" class="Nav-link">アイテム 5</a>
				</li>
				<li class="Nav-item">
					<a href="#" class="Nav-link">アイテム 6</a>
				</li>
				<li class="Nav-item">
					<a href="#" class="Nav-link">アイテム 7</a>
				</li>
				<li class="Nav-item">
					<a href="#" class="Nav-link">アイテム 8</a>
				</li>
				<li class="Nav-item">
					<a href="#" class="Nav-link">アイテム 9</a>
				</li>
				<li class="Nav-item">
					<a href="#" class="Nav-link">アイテム 10</a>
				</li>
				<li class="Nav-item">
					<a href="#" class="Nav-link">アイテム 11</a>
				</li>
				<li class="Nav-item">
					<a href="#" class="Nav-link">アイテム 12</a>
				</li>
			</ul>
		</nav>
	</div>
	<main>
		<!-- コンテンツ部分 -->
	</main>
	<footer>
		<!-- フッタ部分 -->
	</footer>
</CodePost>

<style>
	.Header {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 60px;
	}

	.Drawer {
		position: fixed;
		z-index: 0;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
	}

	.Drawer-backdrop {
		position: absolute;
		z-index: -1;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.5);
	}

	.Drawer-nav {
		position: absolute;
		top: 0;
		right: 0;
		height: 100%;
		width: 280px;
	}

	.Nav {
		overflow: auto;
	}

	.Drawer[aria-expanded] {
		transition-property: visibility;
		transition-duration: 0.25s;
	}

	.Drawer[aria-expanded] .Drawer-backdrop {
		transition-property: opacity;
		transition-duration: 0.25s;
		transition-timing-function: linear;
	}

	.Drawer[aria-expanded] .Drawer-nav {
		transition-property: transform;
		transition-duration: 0.25s;
		transition-timing-function: ease;
	}

	/* 開いているとき */
	.Drawer[aria-expanded='true'] {
		visibility: visible;
	}

	.Drawer[aria-expanded='true'] .Drawer-backdrop {
		opacity: 1;
	}

	.Drawer[aria-expanded='true'] .Drawer-nav {
		transform: translateX(0);
	}

	/* 閉じているとき */
	.Drawer[aria-expanded='false'] {
		visibility: hidden;
	}

	.Drawer[aria-expanded='false'] .Drawer-backdrop {
		opacity: 0;
	}

	.Drawer[aria-expanded='false'] .Drawer-nav {
		transform: translateX(100%);
	}
</style>

<script>
	(function () {
		// ボタンと本体
		const openButton = document.querySelector('.js-openDrawer');
		const drawer = document.querySelector('.js-drawer');
		const closeButton = drawer.querySelector('.js-closeDrawer');
		const backdrop = drawer.querySelector('.js-backdrop');

		// 現在の状態（開いていたらtrue）
		let drawerOpen = false;

		// stateは真偽値
		function changeAriaExpanded(state) {
			const value = state ? 'true' : 'false';
			drawer.setAttribute('aria-expanded', value);
			openButton.setAttribute('aria-expanded', value);
			closeButton.setAttribute('aria-expanded', value);
		}

		// stateは真偽値
		function changeState(state) {
			if (state === drawerOpen) {
				console.log('2回以上連続で同じ状態に変更しようとしました');
				return;
			}
			changeAriaExpanded(state);
			drawerOpen = state;
		}

		function openDrawer() {
			changeState(true);
		}

		function closeDrawer() {
			changeState(false);
		}

		function onClickOpenButton() {
			openDrawer();
		}

		function onClickCloseButton() {
			closeDrawer();
		}

		openButton.addEventListener('click', onClickOpenButton, false);
		closeButton.addEventListener('click', onClickCloseButton, false);
		backdrop.addEventListener('click', onClickCloseButton, false);
	})();
</script>
